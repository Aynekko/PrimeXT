#! /usr/bin/env python
# encoding: utf-8
# a1batross, mittorn, 2018

from waflib import Utils
import os

def options(opt):
	grp = opt.add_option_group('Common options')

	grp.add_option('--enable-physx', action='store_true', dest='ENABLE_PHYSX', default = False,
		help = 'enable PhysX support [default: %default]')

def configure(conf):
	conf.env.ENABLE_PHYSX = conf.options.ENABLE_PHYSX	
	if conf.env.COMPILER_CC == 'msvc':
		# hl.def removes MSVC function name decoration from GiveFnptrsToDll on Windows.
		# Without this, the lookup for this function fails.
		hlDefNode = conf.path.find_resource("./server.def")

		if hlDefNode is not None:
			conf.env.append_unique('LINKFLAGS', '/def:%s' % hlDefNode.abspath())
		else:
			conf.fatal("Could not find hl.def")
	
	conf.check_cc(lib='dl', mandatory=False)
	if conf.env.ENABLE_PHYSX:
		conf.define('USE_PHYSICS_ENGINE', '1')

def build(bld):
	defines = []

	# shared sources
	source = bld.path.parent.ant_glob([
		'game_shared/bone_setup.cpp',
		'game_shared/common.cpp',
		'game_shared/ikcontext.cpp',
		'game_shared/mathlib.cpp',
		'game_shared/matrix.cpp',
		'game_shared/plane.cpp',
		'game_shared/playermove.cpp',
		'game_shared/stringlib.cpp',
		'game_shared/vector.cpp',
		'game_shared/virtualfs.cpp'
	])

	source += bld.path.ant_glob([
		'monsters/aflock.cpp',
		'monsters/agrunt.cpp',
		'airtank.cpp',
		'monsters/animating.cpp',
		'monsters/animation.cpp',
		'monsters/apache.cpp',
		'monsters/barnacle.cpp',
		'monsters/barney.cpp',
		'monsters/bigmomma.cpp',
		'monsters/bloater.cpp',
		'bmodels.cpp',
		'monsters/bullsquid.cpp',
		'buttons.cpp',
		'cbase.cpp',
		'ropes/CElectrifiedWire.cpp',
		'client.cpp',
		'combat.cpp',
		'monsters/controller.cpp',
		'ropes/CRope.cpp',
		'ropes/CRopeSegment.cpp',
		'crossbow.cpp',
		'crowbar.cpp',
		'monsters/defaultai.cpp',
		'dll_int.cpp',
		'doors.cpp',
		'effects.cpp',
		'egon.cpp',
		'explode.cpp',
		'monsters/flyingmonster.cpp',
		'func_break.cpp',
		'func_monitor.cpp',
		'func_tank.cpp',
		'game.cpp',
		'gamerules.cpp',
		'monsters/gargantua.cpp',
		'gauss.cpp',
		'monsters/genericmonster.cpp',
		'ggrenade.cpp',
		'globals.cpp',
		'glock.cpp',
		'monsters/gman.cpp',
		'monsters/h_ai.cpp',
		'h_battery.cpp',
		'h_cycler.cpp',
		'handgrenade.cpp',
		'monsters/hassassin.cpp',
		'monsters/headcrab.cpp',
		'healthkit.cpp',
		'monsters/hgrunt.cpp',
		'monsters/hornet.cpp',
		'hornetgun.cpp',
		'monsters/houndeye.cpp',
		'monsters/ichthyosaur.cpp',
		'monsters/islave.cpp',
		'items.cpp',
		'monsters/leech.cpp',
		'lights.cpp',
		'mapents.cpp',
		'maprules.cpp',
		'monsters/monstermaker.cpp',
		'monsters/monsters.cpp',
		'monsters/monsterstate.cpp',
		'mortar.cpp',
		'mp5.cpp',
		'multiplay_gamerules.cpp',
		'monsters/nihilanth.cpp',
		'monsters/nodes.cpp',
		'novodex.cpp',
		'physics/NxUserStream.cpp',
		'physics/meshdesc.cpp',
		'monsters/osprey.cpp',
		'pathcorner.cpp',
		'physents.cpp',
		'physic.cpp',
		'plats.cpp',
		'player.cpp',
		'monsters/playermonster.cpp',
		'python.cpp',
		'monsters/rat.cpp',
		'monsters/roach.cpp',
		'rpg.cpp',
		'satchel.cpp',
		'saverestore.cpp',
		'monsters/schedule.cpp',
		'monsters/scientist.cpp',
		'monsters/scripted.cpp',
		'shotgun.cpp',
		'singleplay_gamerules.cpp',
		'skill.cpp',
		'sound.cpp',
		'monsters/soundent.cpp',
		'spectator.cpp',
		'monsters/spritemonster.cpp',
		'monsters/squadmonster.cpp',
		'squeakgrenade.cpp',
		'stats.cpp',
		'strings.cpp',
		'subs.cpp',
		'monsters/talkmonster.cpp',
		'teamplay_gamerules.cpp',
		'monsters/tempmonster.cpp',
		'monsters/tentacle.cpp',
		'physics/tracemesh.cpp',
		'triggers.cpp',
		'tripmine.cpp',
		'monsters/turret.cpp',
		'util.cpp',
		'weapons.cpp',
		'world.cpp',
		'monsters/xen.cpp',
		'monsters/zombie.cpp'
	])
	
	if bld.env.VOICEMGR:
		source += bld.path.parent.ant_glob([
			'game_shared/voice_gamemgr.cpp',
		])
	else:
		defines += ['NO_VOICEGAMEMGR']

	includes = Utils.to_list('. monsters physics wpn_shared ../phys_shared ../common ../engine ../pm_shared ../game_shared ../public')

	libs = ['DL']

	if bld.env.DEST_OS not in ['android', 'dos']:
		install_path = os.path.join(bld.env.GAMEDIR, bld.env.SERVER_DIR)
	else:
		install_path = bld.env.PREFIX

	bld.shlib(
		source   = source,
		target   = bld.env.SERVER_NAME + bld.env.POSTFIX,
		name     = 'server',
		features = 'c cxx',
		includes = includes,
		defines  = defines,
		use      = libs,
		install_path = install_path,
		subsystem = bld.env.MSVC_SUBSYSTEM,
		idx      = bld.get_taskgen_count()
	)
